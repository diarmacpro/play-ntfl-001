	pR(
		'https://cdn.weva.my.id/apix/dtSj',
		{ tgl : '2025-08-05' },
		( e, d )=>{

		const grouped = _.chain(d.data)
			.groupBy('id_sj')
			.mapValues(sjGroup =>
				_.groupBy(sjGroup, item => item.id_mkt ?? 'null')
			)
			.value();

		// Pisahkan berdasarkan jumlah id_mkt dalam tiap id_sj
		const [singleMkt, multipleMkt] = _.partition(
			Object.entries(grouped),
			([, mktGroup]) => Object.keys(mktGroup).length === 1
		);

		// Ubah kembali menjadi objek jika perlu
		const singleMktObj = Object.fromEntries(singleMkt);
		const multipleMktObj = Object.fromEntries(multipleMkt);

    const summary = {};

    Object.entries(singleMktObj).forEach(([id_sj, itemsByMkt]) => {
      const id_mkt = Object.keys(itemsByMkt)[0];
      const items = itemsByMkt[id_mkt];

      const timestamps = items.map(item => item.dttm || '');
      const stamp = timestamps.length ? timestamps[0].split(' ')[1] : '';

      const statusKeys = items.map(item => item.status_sj || '');
      const statusLevel = (() => {
        const set = new Set(statusKeys.flatMap(s => s.split(',')));
        const statusSequence = ['d_mgr', 'd_wh', 'd_finish'];
        const level = statusSequence.reduce((acc, key, idx) =>
          set.has(key) ? idx + 1 : acc, 0);
        return level || 4;
      })();

      const countNonEmpty = key =>
        items.filter(item => item[key] != null && item[key] !== '').length;

      summary[id_sj] = {
        id_sj,
        id_mkt,
        jml_item: items.length,
        stamp,
        status_sj: statusLevel,
        rtr: countNonEmpty('rtr'),
        onoff: countNonEmpty('onoff'),
        ekspedisi: countNonEmpty('ekspedisi')
      };
    });

    console.log(summary);


		console.log('Hanya 1 marketing:', singleMktObj);
		console.log('Lebih dari 1 marketing:', multipleMktObj);

		}
	);


